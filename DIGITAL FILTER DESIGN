module FIR_Filter (
    input clk,               // Clock signal
    input rst,               // Reset signal
    input [15:0] x_in,       // 16-bit input data (x[n])
    output reg [15:0] y_out  // 16-bit output data (y[n])
);

    // Define filter coefficients (for example, a simple averaging filter)
    reg [15:0] b [3:0];      // Coefficients b0, b1, b2, b3
    reg [15:0] x [3:0];      // Delayed input samples x[n], x[n-1], x[n-2], x[n-3]
    
    integer i;
    
    // Filter initialization (b coefficients and x samples)
    initial begin
        b[0] = 16'd1;   // Coefficients for FIR filter
        b[1] = 16'd2;
        b[2] = 16'd3;
        b[3] = 16'd4;
        
        // Initializing input delay registers
        for (i = 0; i < 4; i = i + 1)
            x[i] = 16'd0;
    end

    // Always block for applying the FIR filter
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            // Reset all delay registers
            for (i = 0; i < 4; i = i + 1)
                x[i] <= 16'd0;
            y_out <= 16'd0;
        end else begin
            // Shift the input samples
            x[0] <= x_in;
            x[1] <= x[0];
            x[2] <= x[1];
            x[3] <= x[2];
            
            // Calculate the output y[n] based on the FIR formula
            y_out <= (b[0] * x[0] + b[1] * x[1] + b[2] * x[2] + b[3] * x[3]) >>> 4;  // Shift to prevent overflow
        end
    end

endmodule
